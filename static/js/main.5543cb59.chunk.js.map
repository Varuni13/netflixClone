{"version":3,"sources":["Row.js","requests.js","Title.js","App.js","reportWebVitals.js","index.js"],"names":["Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","axios","get","request","console","log","data","results","fetchData","table","className","map","movie","src","poster_path","backdrop_path","alt","name","id","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTA+CgBA,MAzChB,YAA6C,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAASC,EAAa,EAAbA,WAC3B,EAA2BC,mBAAS,IAApC,mBAAMC,EAAN,KAAcC,EAAd,KAkBA,OAfAC,qBAAU,WAAM,4CAEZ,4BAAAC,EAAA,sEACsBC,IAAMC,IAAIR,GADhC,cACMS,EADN,OAEAC,QAAQC,IAAIF,EAAQG,KAAKC,SACzBT,EAAUK,EAAQG,KAAKC,SAHvB,kBAIOJ,GAJP,4CAFY,0DAQdK,KAEC,CAACd,IAEJU,QAAQK,MAAMZ,GAKV,sBAAKa,UAAU,MAAf,UACI,6BAAKjB,IAEL,qBAAKiB,UAAU,eAAf,SAGKb,EAAOc,KAAI,SAAAC,GAAK,OACb,qBAEAF,UAAS,sBAAiBf,GAAc,oBACxCkB,IAAG,UAjCN,uCAiCM,OAAgBlB,EAAaiB,EAAME,YAAaF,EAAMG,eAAiBC,IAAKJ,EAAMK,MAFhFL,EAAMM,aCtBhBC,EAXA,CACXC,cAAe,yGACfC,sBAAuB,sGACvBC,cAAe,uGACfC,kBAAmB,sGACnBC,kBAAmB,sGACnBC,kBAAmB,sGACnBC,mBAAoB,yGACpBC,mBAAoB,uG,MCETC,MATf,WACE,OACE,sBAAKlB,UAAU,QAAf,UACE,yCACM,qBAAKA,UAAU,uBCoBZmB,MApBf,WACE,OACE,sBAAKnB,UAAU,MAAf,UACA,cAAC,EAAD,IAEA,cAAC,EAAD,CACEjB,MAAO,mBAAmBC,SAAU,sGACpCC,YAAU,IAEV,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAUyB,EAASC,gBAC7C,cAAC,EAAD,CAAK3B,MAAM,YAAYC,SAAUyB,EAASG,gBAC1C,cAAC,EAAD,CAAK7B,MAAM,gBAAgBC,SAAUyB,EAASI,oBAC9C,cAAC,EAAD,CAAK9B,MAAM,gBAAgBC,SAAUyB,EAASK,oBAC9C,cAAC,EAAD,CAAK/B,MAAM,aAAaC,SAAUyB,EAASM,oBAC3C,cAAC,EAAD,CAAKhC,MAAM,iBAAiBC,SAAUyB,EAASO,qBAC/C,cAAC,EAAD,CAAKjC,MAAM,gBAAgBC,SAAUyB,EAASQ,yBCVrCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5543cb59.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react' ;\r\nimport axios from 'axios'; \r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction  Row({title, fetchUrl,isLargeRow}) {\r\n    const[movies, setMovies] = useState([]);\r\n\r\n    // A snippet of code which runs on a specific condition\r\n    useEffect(() => {\r\n        // if [],run once when row loads,and dont run again\r\n        async function fetchData() {\r\n        const request = await axios.get(fetchUrl);\r\n        console.log(request.data.results);\r\n        setMovies(request.data.results);\r\n        return request;\r\n        }\r\n      fetchData();\r\n\r\n    }, [fetchUrl]);\r\n\r\n    console.table(movies);\r\n\r\n\r\n    return (\r\n    \r\n        <div className=\"row\"> \r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row__posters\">\r\n                {/* several row_posters*/}\r\n\r\n                {movies.map(movie =>(\r\n                    <img \r\n                    key={movie.id}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`} alt={movie.name}></img>\r\n                    \r\n                 ))}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )   \r\n }\r\n\r\n export default Row\r\n","const API_KEY =\"b0d1867018a029a8bfcc00a0d74c1e2f\"\r\n\r\nconst requests={\r\n    fetchTrending: 'https://api.themoviedb.org/3/trending/all/week?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&language=en-US',\r\n    fetchNetflixOriginals: 'https://api.themoviedb.org/3/discover/tv?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&with_networks=213',\r\n    fetchTopRated: 'https://api.themoviedb.org/3/movie/top_rated?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&language=en-US',\r\n    fetchActionMovies: 'https://api.themoviedb.org/3/discover/movie?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&with_genres=28',\r\n    fetchComedyMovies: 'https://api.themoviedb.org/3/discover/movie?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&with_genres=35',\r\n    fetchHorrorMovies: 'https://api.themoviedb.org/3/discover/movie?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&with_genres=27',\r\n    fetchRomanceMovies: 'https://api.themoviedb.org/3/discover/movie?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&with_genres=10749',\r\n    fetchDocumentaries: 'https://api.themoviedb.org/3/discover/movie?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&with_genres=99',\r\n}\r\n\r\nexport default requests;","import React from 'react'\r\nimport './Title.css';\r\n\r\nfunction Title() {\r\n  return (\r\n    <div className=\"Title\">\r\n      <h1>NETFLIX</h1>\r\n            <div className=\"Title-Subtitle\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Title from './Title';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Title />\n   \n    <Row \n      title= \"NETFLIX ORIGINLS\" fetchUrl={\"https://api.themoviedb.org/3/discover/tv?api_key=b0d1867018a029a8bfcc00a0d74c1e2f&with_networks=213\"}\n      isLargeRow \n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending }/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Now\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}